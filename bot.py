import asyncio
import logging
import os
import random
from datetime import datetime, time
import pytz
import google.generativeai as genai
from telegram import Bot
from telegram.error import TelegramError
import schedule
import time as time_module
from dotenv import load_dotenv
import threading
from flask import Flask, jsonify
import signal
import sys

# .env dosyasƒ±nƒ± y√ºkle (Railway ortam deƒüi≈ükenlerini de destekler)
load_dotenv()

# Flask app (Railway health check i√ßin)
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify({
        "status": "running",
        "service": "telegram-bot",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

# Logging ayarlarƒ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SoftwareBot:
    def __init__(self):
        # Environment variables (Railway otomatik olarak saƒülar)
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.gemini_api_key = os.getenv('GEMINI_API_KEY')
        
        # Railway port (varsayƒ±lan 3000)
        self.port = int(os.getenv('PORT', 3000))

        if not all([self.bot_token, self.channel_id, self.gemini_api_key]):
            raise ValueError("T√ºm environment variables'larƒ± ayarlayƒ±n!")

        # Bot ve AI kurulumu
        self.bot = Bot(token=self.bot_token)
        genai.configure(api_key=self.gemini_api_key)
        self.model = genai.GenerativeModel('models/gemini-1.5-flash')

        # T√ºrkmenistan timezone
        self.timezone = pytz.timezone('Asia/Ashgabat')
        
        # Bot durumu
        self.is_running = True

        # Bot ≈ûahsiyeti ve Sistem Prompt
        self.sen_hakynda = """
        Sen tejribeli programmist we tehnologi√Ωa h√∂wesk√§ri bolan bot.

        KIMSI≈á:
        - 5+ √Ωyllyk programma √Ωazmak tejribesi bolan developer
        - Web, mobile, database √Ωaly k√∂p ugurda tejribeli
        - T√§ze ba≈üla√Ωanlara we orta derejeli programmistlere k√∂mek ed√Ω√§n
        - √áyl≈üyrymly zatlary √Ω√∂neke√Ω d√º≈ü√ºndirip ber√Ω√§n
        - Dostlukly, √Ωakyn √Ω√∂ne professional gatna≈ü√Ωan

        MAKSADY≈á:
        - Programma √Ωazyjylary √º√ßin g√ºnde 4 gezek pe√Ωdaly mazmun pa√Ωla≈ümak
        - Okyjylara hakykatdanam pe√Ωdaly, amaly maglumatlary bermek
        - T√§ze ba≈üla√Ωanlary we orta derejeli programmistleri h√∂weslendirmek
        - Ylham beriji, h√∂weslendiriji bolmak

        TARZY≈á:
        - Dostlukly we √Ωakymly dil ulan
        - Emoji ulan √Ω√∂ne artykma√ß d√§l
        - Gysga, d√º≈ün√ºkli we t√§sirli √Ωaz
        - Amaly mysallar ber
        - Heka√Ωa √Ωaly akyjy s√∂hbetde≈ü bol
        - K√§wagt humor go≈ü

        USSATLYK UGURLARY≈á:
        - Frontend: HTML/CSS, JavaScript, React (ba≈ülangy√ß)
        - Backend: Python, Node.js (√Ω√∂neke√Ω)
        - Database: MySQL, PostgreSQL (esasy)
        - Gurallar: VS Code, Git (zerur)
        - Mobil: React Native, Flutter (giri≈ü)
        - H√ºn√§rm√§nlik: Kod h√§si√Ωeti, debugging, testing
        - Tejribe: Pe√Ωdaly programmalar, k√∂mek√ßi programmalar
        """

        # Zamana g√∂re i√ßerik t√ºrleri
       self.wagta_bagly_temalar = {
            "morning": ["h√∂weslendiri≈ü", "g√ºn√º≈à_maslahaty", "irden_i≈ü", "kod_h√§si√Ωeti"],
            "noon": ["√Ω√∂neke√Ωje_d√º≈ü√ºndiri≈ü", "≈üert_tany≈üdyry≈ü", "gowy_usullar", "framework_tany≈üdyry≈ü"],
            "afternoon": ["mesele_√ß√∂zmek", "debugging", "kod_d√ºzetmek", "tejribe_pa√Ωla≈ümak"],
            "evening": ["kar√Ωera", "√∂wrenmek_√ße≈ümeleri", "≈üahsy_√∂s√º≈ü", "geljekki_maksatlar"]
        }

    def get_time_of_day(self):
        """G√ºn√º≈à ha√Ωsy wagty bolandygyny kesgitle"""
        current_hour = datetime.now(self.timezone).hour

        if 6 <= current_hour < 11:
            return "morning"
        elif 11 <= current_hour < 16:
            return "noon"
        elif 16 <= current_hour < 20:
            return "afternoon"
        else:
            return "evening"

    def create_dynamic_prompt(self):
        """Wagta we t√∂t√§nle√Ωinlige g√∂r√§ dinamiki prompt d√∂ret"""
        current_time = datetime.now(self.timezone)
        time_of_day = self.get_time_of_day()
        day_name = current_time.strftime("%A")

        # Zamana g√∂re tema se√ß
        themes = self.wagta_bagly_temalar.get(time_of_day, ["genel_programlama"])
        selected_theme = random.choice(themes)

        # Dinamik sistem prompt
        system_prompt = f"""
        {self.sen_hakynda}

        H√ÑZIRKI √ùAGDA√ù:
        - Sene: {current_time.strftime('%d %B %Y')}
        - G√ºn: {day_name}
        - Sagat: {current_time.strftime('%H:%M')} (T√ºrkmenistan)
        - G√ºn√º≈à Wagty: {time_of_day}
        - Sa√Ωlanan Tema: {selected_theme}

        MESELE:
        Bu maglumatlary g√∂z √∂≈à√ºnde tutup, h√§zir kanala programirleme bilen baglany≈üykly okajaklary h√∂weslendirjek gowja makalajyk √Ωaz.

        D√úZG√úNLER:
        1. Doly we √∂zbolu≈üly mazmun d√∂ret (≈üablon ulanma)
        2. Bu wagta we g√ºne la√Ωyk bol
        3. 120-200 s√∂z arasynda √Ωaz
        4. Amaly, ulanyl√Ωan maglumat ber
        5. H√∂weslendiriji bol
        6. 2-3 emoji ulan (k√∂p d√§l)
        7. Hashtag go≈üma (awtomatiki go≈üaryn)
        8. Kod mysaly bar bolsa ``` bilen √Ωaz
        9. Hakyky tejribelerinden g√ºrr√º≈à ber
        10. Okyjylar bilen dostlukly s√∂hbetde≈ü bol
        11. M√ñH√úM: T√§ze ba≈üla√Ωanlar we orta derejeli programmistler √º√ßin d√º≈ün√ºkli √Ωaz
        12. √áyl≈üyrymly adalgalary ulanma, √Ω√∂neke√Ω d√º≈ü√ºndiri≈ü ber
        13. Esasy adalgalary i≈àlis dilinde a√Ωt
        14. Mysallar getirip g√∂rkez.


        GADAGAN ZATLAR:
        - "Salam dostlar" √Ωaly ≈üablon ba≈ülangyjlar
        - K√∂p emoji
        - Ga√Ωtalan√Ωan s√∂zler
        - Emeli g√∂r√ºn√Ω√§n dil
        - Umumy bilgiler
        - √áyl≈üyrymly tehniki jargon


        A≈àsatrak bir kod mysal getirip d√º≈ü√ºndir √Ωa-da belli bir tema bo√Ωun√ßa zadlar √∂wret √Ωa-da bellir bir programirleme dili barada gyzykly faktlar a√Ωdyp ber. √ùa-da programist bolmak √º√ßin h√∂kmany bilmeli zatlar, ulanmaly programmalar barada a√Ωdyp ber. 
        H√§zir aja√Ωyp mazmun d√∂ret!
        """

        return system_prompt

    async def generate_content(self):
        """√ùasama akyl bilen doly √∂zbolu≈üly mazmun d√∂retmek"""
        try:
            # Dinamik prompt olu≈ütur
            prompt = self.create_dynamic_prompt()

            # ƒ∞√ßerik olu≈ütur
            response = self.model.generate_content(prompt)
            content = response.text.strip()

            # Hashtag'larƒ± akƒ±llƒ± ekle
            hashtags = self.generate_smart_hashtags(content)

            # Son i√ßerik
            final_content = f"{content}\n\n{hashtags}"

            return final_content

        except Exception as e:
            logger.error(f"ƒ∞√ßerik olu≈üturma hatasƒ±: {e}")
            # Fallback - daha akƒ±llƒ±
            return self.get_fallback_content()

    def generate_smart_hashtags(self, content):
        """ƒ∞√ßeriƒüe g√∂re akƒ±llƒ± hashtag olu≈üturma"""
        hashtags = ["#ProgrammaYazmak", "#Kod", "#√ñwrenmek"]

        # ƒ∞√ßerikte ge√ßen teknolojilere g√∂re hashtag ekle
        tech_keywords = {
            "python": "#Python", "javascript": "#JavaScript", "react": "#React",
            "html": "#HTML", "css": "#CSS", "git": "#Git",
            "api": "#API", "database": "#Database", "mysql": "#MySQL",
            "mobil": "#MobilApp", "web": "#WebDev", "frontend": "#Frontend",
            "backend": "#Backend", "debugging": "#Debugging", "test": "#Testing"
        }

        content_lower = content.lower()
        for keyword, hashtag in tech_keywords.items():
            if keyword in content_lower and hashtag not in hashtags:
                hashtags.append(hashtag)
                if len(hashtags) >= 5:  # Maksimum 5 hashtag
                    break

        # Zaman tabanlƒ± hashtag
        time_of_day = self.get_time_of_day()
        time_hashtags = {
            "morning": "#IrdenkiH√∂wes",
            "noon": "#G√ºnorta√ñwrenmek",
            "afternoon": "#IkindiWagt",
            "evening": "#Ag≈üamD√º≈ü√ºnje"
        }

        if time_of_day in time_hashtags:
            hashtags.append(time_hashtags[time_of_day])

        return " ".join(hashtags)

    def get_fallback_content(self):
        """Hata durumunda kullanƒ±lacak akƒ±llƒ± fallback"""
        current_time = datetime.now(self.timezone)

        fallback_messages = [
            f"üí° ≈ûu g√ºnler {current_time.strftime('%d %B')} senesinde programma √Ωazmakda n√§me √∂wrendi≈à?\n\nHer g√ºn ki√ßi √§dim ‚Äî uly √ºst√ºnlikleri≈à a√ßary! Kod √Ωazmagy≈à i≈à owadan taraplary, elmydama t√§ze zatlary √∂wrenmekdir üöÄ",

            f"ü§î H√§zir ha√Ωsy tehnologi√Ωa bilen i≈üle√Ω√§rsi≈à?\n\nMen ≈üu g√ºnler kod g√∂zden ge√ßir√Ω√§n wagtym ≈üe√Ωle pikir etdim: I≈à gowy kod di≈àe i≈üle√Ω√§n kod d√§l, be√Ωlekileri≈à hem a≈àsat d√º≈ü√ºnip bil√Ω√§n kody! üìù",

            f"‚ö° ≈ûu wagt {current_time.strftime('%H:%M')} ‚Äî g√ºn√º≈à kod √Ωazmagyna g√º√Ωj√º≈à n√§hili?\n\nK√§te i≈à gowy √ß√∂zg√ºtler komp√Ωuteri √Ωapany≈àdan so≈à akly≈àa gel√Ω√§r. Kelle bula≈üyk bolsa, gysga gezelen√ß jadyly bolup biler! üö∂‚Äç‚ôÇÔ∏è"
        ]

        hashtags = "#ProgrammaYazmak #Kod #Howeslendiris #Owrenmek"

        safe_base = random.choice(fallback_messages).replace("*", "").replace("_", "").replace("[", "").replace("]", "")

        return f"{safe_base}\n\n{hashtags}"

    async def send_message_to_channel(self, message):
        """Kanala mesaj g√∂nderme"""
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='Markdown'
            )
            logger.info("Mesaj ba≈üarƒ±yla g√∂nderildi!")
            return True
        except TelegramError as e:
            logger.error(f"Telegram hatasƒ±: {e}")
            return False
        except Exception as e:
            logger.error(f"Mesaj g√∂nderme hatasƒ±: {e}")
            return False

    async def send_scheduled_content(self):
        """Zamanlanmƒ±≈ü i√ßerik g√∂nderme"""
        logger.info("Akƒ±llƒ± i√ßerik olu≈üturuluyor...")

        current_time = datetime.now(self.timezone)
        time_of_day = self.get_time_of_day()

        # Zaman tabanlƒ± ba≈ülƒ±k emojileri
        time_emojis = {
            "morning": "üåÖ",
            "noon": "‚òÄÔ∏è",
            "afternoon": "üå§Ô∏è",
            "evening": "üåô"
        }

        # ƒ∞√ßerik olu≈ütur
        content = await self.generate_content()

        # Zaman bilgisini ekle
        time_str = current_time.strftime("%H:%M")
        emoji = time_emojis.get(time_of_day, "üíª")

        # Son mesaj
        final_message = f"{emoji} {content}"

        success = await self.send_message_to_channel(final_message)
        if success:
            logger.info(f"Akƒ±llƒ± i√ßerik g√∂nderildi! [{time_str}]")
        else:
            logger.error("Mesaj g√∂nderilemedi!")

    async def test_message(self):
        """Test mesajƒ±"""
        print("ü§ñ Test i√ßin rastgele i√ßerik olu≈üturuluyor...")

        random_content = await self.generate_content()

        test_content = f"""üß™ **TEST MESAJI** - Bot √áalƒ±≈üƒ±yor! üéâ

{random_content}

---
üìÖ **G√ºnl√ºk Program:**
‚Ä¢ 09:00 - Sabah tavsiyesi
‚Ä¢ 12:00 - √ñƒülen i√ßeriƒüi
‚Ä¢ 16:00 - ƒ∞kindi payla≈üƒ±mƒ±
‚Ä¢ 21:00 - Ak≈üam √∂zeti

#TestBot #ProgramBot #Kod"""

        success = await self.send_message_to_channel(test_content)
        if success:
            print("‚úÖ Test mesajƒ± ba≈üarƒ±yla g√∂nderildi!")
        else:
            print("‚ùå Test mesajƒ± g√∂nderilemedi!")

    def schedule_messages(self):
        """Mesaj zamanlamasƒ±"""
        # T√ºrkmenistan zamanƒ± ile zamanlama
        schedule.every().day.at("09:00").do(lambda: asyncio.create_task(self.send_scheduled_content()))
        schedule.every().day.at("12:00").do(lambda: asyncio.create_task(self.send_scheduled_content()))
        schedule.every().day.at("16:00").do(lambda: asyncio.create_task(self.send_scheduled_content()))
        schedule.every().day.at("21:00").do(lambda: asyncio.create_task(self.send_scheduled_content()))

        logger.info("Mesaj zamanlarƒ± ayarlandƒ±!")
        logger.info("Saatler: 09:00, 12:00, 16:00, 21:00 (T√ºrkmenistan)")

    async def run_scheduler(self):
        """Zamanlayƒ±cƒ± d√∂ng√ºs√º"""
        while self.is_running:
            schedule.run_pending()
            await asyncio.sleep(60)  # Her dakika kontrol et

    def run_flask_app(self):
        """Flask uygulamasƒ±nƒ± √ßalƒ±≈ütƒ±r"""
        app.run(host='0.0.0.0', port=self.port, debug=False)

    async def run(self):
        """Bot √ßalƒ±≈ütƒ±rma - Railway i√ßin optimize edilmi≈ü"""
        print("ü§ñ Programlama Bot ba≈ülƒ±yor...")
        
        # ƒ∞lk test mesajƒ±
        await self.test_message()

        # Zamanlamalarƒ± ayarla
        self.schedule_messages()

        print("‚è∞ Bot zamanlanmƒ±≈ü mesajlar i√ßin bekliyor...")
        print("üìç Saatler: 09:00, 12:00, 16:00, 21:00 (T√ºrkmenistan)")
        print(f"üåê Flask sunucusu port {self.port}'ta √ßalƒ±≈üƒ±yor")

        # Flask'ƒ± ayrƒ± thread'de √ßalƒ±≈ütƒ±r
        flask_thread = threading.Thread(target=self.run_flask_app, daemon=True)
        flask_thread.start()

        # Zamanlayƒ±cƒ±yƒ± √ßalƒ±≈ütƒ±r
        await self.run_scheduler()

    def stop(self):
        """Bot'u durdur"""
        self.is_running = False
        logger.info("Bot durduruluyor...")

# Signal handler - Railway i√ßin
def signal_handler(signum, frame):
    logger.info(f"Signal {signum} alƒ±ndƒ±, bot durduruluyor...")
    bot_instance.stop()
    sys.exit(0)

# Manuel test fonksiyonlarƒ±
async def send_test_now():
    """Hemen test mesajƒ± g√∂nder"""
    bot = SoftwareBot()
    await bot.test_message()

async def send_random_content():
    """Sadece rastgele i√ßerik g√∂nder"""
    bot = SoftwareBot()
    await bot.send_scheduled_content()

async def send_custom_message(message):
    """√ñzel mesaj g√∂nder"""
    bot = SoftwareBot()
    await bot.send_message_to_channel(message)

# Global bot instance
bot_instance = None

if __name__ == "__main__":
    try:
        bot_instance = SoftwareBot()
        
        # Signal handlers (Railway i√ßin)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)

        # Komut satƒ±rƒ± arg√ºmanlarƒ±
        import sys
        if len(sys.argv) > 1:
            if sys.argv[1] == "test":
                # Test mesajƒ± g√∂nder
                asyncio.run(send_test_now())
            elif sys.argv[1] == "random":
                # Sadece rastgele i√ßerik g√∂nder
                asyncio.run(send_random_content())
            elif sys.argv[1] == "message" and len(sys.argv) > 2:
                # √ñzel mesaj g√∂nder
                custom_msg = " ".join(sys.argv[2:])
                asyncio.run(send_custom_message(custom_msg))
            else:
                print("Kullanƒ±m:")
                print("python bot.py          - Normal √ßalƒ±≈ütƒ±rma")
                print("python bot.py test     - Test mesajƒ± g√∂nder")
                print("python bot.py random   - Rastgele i√ßerik g√∂nder")
                print("python bot.py message 'Mesaj i√ßeriƒüi' - √ñzel mesaj g√∂nder")
        else:
            # Normal √ßalƒ±≈ütƒ±rma (Railway i√ßin)
            asyncio.run(bot_instance.run())

    except KeyboardInterrupt:
        print("\nüõë Bot durdu!")
    except Exception as e:
        logger.error(f"Genel hata: {e}")
        print(f"‚ùå Hata: {e}")
