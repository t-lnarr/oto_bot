import asyncio
import logging
import os
import random
from datetime import datetime, time
import pytz
import google.generativeai as genai
from telegram import Bot
from telegram.error import TelegramError
import schedule
import time as time_module
from dotenv import load_dotenv
import threading
from flask import Flask, jsonify
import signal
import sys

# .env fa√Ωlyny √Ω√ºkle (Railway gur≈üaw √º√Ωtge√Ωjilerini hem golda√Ωar)
load_dotenv()

# Flask app (Railway saglygy barlagy √º√ßin)
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify({
        "status": "i≈üle√Ω√§r",
        "hyzmat": "telegram-bot",
        "wagt": datetime.now().isoformat()
    })

@app.route('/health')
def health():
    return jsonify({"status": "sagdyn"})

# G√ºndelik √Ωazgysy sazlamalary
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ProgrammaBot:
    def __init__(self):
        # Gur≈üaw √º√Ωtge√Ωjileri (Railway awtomatiki √ºpj√ºn ed√Ω√§r)
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.kanal_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.gemini_api_a√ßar = os.getenv('GEMINI_API_KEY')

        # Railway porty (esasy 3000)
        self.port = int(os.getenv('PORT', 3000))

        if not all([self.bot_token, self.kanal_id, self.gemini_api_a√ßar]):
            raise ValueError("√Ñhli gur≈üaw √º√Ωtge√Ωjilerini sazla≈à!")

        # Bot we AI gurlu≈üy
        self.bot = Bot(token=self.bot_token)
        genai.configure(api_key=self.gemini_api_a√ßar)
        self.model = genai.GenerativeModel('models/gemini-1.5-flash')

        # T√ºrkmenistan wagt zolagy
        self.wagt_zolagy = pytz.timezone('Asia/Ashgabat')

        # Bot √Ωagda√Ωy
        self.i≈üle√Ω√§r = True

        # Bot ≈ûahsy√Ωeti we Ulgam Tab≈üyrygy
        self.sen_hakynda = """
        Sen tejribeli programmist we tehnologi√Ωa h√∂wesk√§ri bolan bot.

        KIMSI≈á:
        - 5+ √Ωyllyk programma √Ωazmak tejribesi bolan developer
        - Web, mobil, database √Ωaly k√∂p ugurda tejribeli
        - T√§ze ba≈üla√Ωanlara we orta derejeli programmistlere k√∂mek ed√Ω√§n
        - √áyl≈üyrymly zatlary √Ω√∂neke√Ω d√º≈ü√ºndirip bil√Ω√§n
        - Dostlukly, √Ωakyn √Ω√∂ne professional gatna≈ü√Ωan

        MAKSADY≈á:
        - Programma √Ωazyjylary √º√ßin g√ºnde 4 gezek pe√Ωdaly mazmun pa√Ωla≈ümak
        - Okyjylara hakykatdanam pe√Ωdaly, amaly maglumatlary bermek
        - T√§ze ba≈üla√Ωanlary we orta derejeli programmistleri h√∂weslendirmek
        - Ylham beriji, h√∂weslendiriji bolmak

        STILI≈á:
        - Dostlukly we √Ωakymly dil ulan
        - Emoji ulan √Ω√∂ne artykma√ß d√§l
        - Gysga, d√º≈ün√ºkli we t√§sirli √Ωaz
        - Amaly mysallar ber
        - Heka√Ωa √Ωaly akyjy s√∂hbetde≈ü bol
        - K√§wagt humor go≈ü

        USSATLYK UGURLARY≈á:
        - Frontend: HTML/CSS, JavaScript, React (ba≈ülangy√ß)
        - Backend: Python, Node.js (√Ω√∂neke√Ω)
        - Maglumat bazasy: MySQL, PostgreSQL (esasy)
        - Gurallar: VS Code, Git (zerur)
        - Mobil: React Native, Flutter (giri≈ü)
        - H√ºn√§rm√§nlik: Kod h√§si√Ωeti, debugging, testing
        - Tejribe: Pe√Ωdaly programmalar, k√∂mek√ßi programmalar
        """

        # Wagta g√∂r√§ mazmun g√∂rn√º≈üleri
        self.wagta_bagly_temalar = {
            "ertir": ["h√∂weslendiriji", "g√ºn√º≈à_maslahaty", "irden_i≈ü", "kod_h√§si√Ωeti"],
            "g√ºnorta": ["√Ω√∂neke√Ωje_d√º≈ü√ºndiri≈ü", "algoritma_tany≈üdyry≈ü", "gowy_usullar", "framework_tany≈üdyry≈ü"],
            "ikindi": ["mesele_√ß√∂zmek", "debugging", "kod_d√ºzetmek", "tejribe_pa√Ωla≈ümak"],
            "ag≈üam": ["kar√Ωera", "√∂wrenmek_√º√ßin_√ße≈ümeler", "≈üahsy_√∂s√º≈ü", "geljekki_maksatlar"]
        }

    def g√ºn√º≈à_wagty(self):
        """G√ºn√º≈à ha√Ωsy wagty bolandygyny kesgitle"""
        h√§zirki_sagat = datetime.now(self.wagt_zolagy).hour

        if 6 <= h√§zirki_sagat < 11:
            return "ertir"
        elif 11 <= h√§zirki_sagat < 16:
            return "g√ºnorta"
        elif 16 <= h√§zirki_sagat < 20:
            return "ikindi"
        else:
            return "ag≈üam"

    def dinamiki_tab≈üyryk_d√∂ret(self):
        """Wagta we t√∂t√§nle√Ωinlige g√∂r√§ dinamiki tab≈üyryk d√∂ret"""
        h√§zirki_wagt = datetime.now(self.wagt_zolagy)
        g√ºn√º≈à_wagty = self.g√ºn√º≈à_wagty()
        g√ºn√º≈à_ady = h√§zirki_wagt.strftime("%A")

        # Wagta g√∂r√§ tema sa√Ωla
        temalar = self.wagta_bagly_temalar.get(g√ºn√º≈à_wagty, ["umumy_programma"])
        sa√Ωlanan_tema = random.choice(temalar)

        # Dinamiki ulgam tab≈üyrygy
        ulgam_tab≈üyrygy = f"""
        {self.sen_hakynda}

        H√ÑZIRKI √ùAGDA√ù:
        - Sene: {h√§zirki_wagt.strftime('%d %B %Y')}
        - G√ºn: {g√ºn√º≈à_ady}
        - Sagat: {h√§zirki_wagt.strftime('%H:%M')} (T√ºrkmenistan)
        - G√ºn√º≈à Wagty: {g√ºn√º≈à_wagty}
        - Sa√Ωlanan Tema: {sa√Ωlanan_tema}

        MESELE:
        Bu maglumatlary g√∂z √∂≈à√ºnde tutup, h√§zir kanala programmirlemek bilen bagly okyjylary h√∂weslendirjek gowy mazmun √Ωaz.

        D√úZG√úNLER:
        1. Doly we √∂zbolu≈üly mazmun d√∂ret (≈üablon ulanma)
        2. Bu wagta we g√ºne la√Ωyk bol
        3. 120-200 s√∂z arasynda √Ωaz
        4. Amaly, ulanyl√Ωan maglumat ber
        5. H√∂weslendiriji bol
        6. 2-3 emoji ulan (k√∂p d√§l)
        7. Hashtag go≈üma (awtomatiki go≈üaryn)
        8. Kod mysaly bar bolsa ``` bilen √Ωaz
        9. Hakyky tejribelerden g√ºrr√º≈à ber
        10. Okyjylar bilen dostlukly s√∂hbetde≈ü bol
        11. M√ñH√úM: T√§ze ba≈üla√Ωanlar we orta derejeli programmistler √º√ßin d√º≈ün√ºkli √Ωaz
        12. √áyl≈üyrymly adalgalary ulanma, √Ω√∂neke√Ω d√º≈ü√ºndiri≈ü ber
        13. Esasy adalgalary i≈àlis dilinde a√Ωt
        14. Mysallar getirip g√∂rkez

        GADAGAN ZATLAR:
        - "Salam dostlar" √Ωaly ≈üablon ba≈ülangyjlar
        - K√∂p emoji
        - Ga√Ωtalan√Ωan s√∂zler
        - Emeli g√∂r√ºn√Ω√§n dil
        - Umumy bilgiler
        - √áyl≈üyrymly tehniki jargon

        A≈àsatrak bir kod mysaly getirip d√º≈ü√ºndir √Ωa-da belli bir tema bo√Ωun√ßa zatlar √∂wret √Ωa-da belli bir programmirlemek dili barada gyzykly faktlar a√Ωdyp ber. √ùa-da programmist bolmak √º√ßin h√∂kmany bilmeli zatlar, ulanmaly programmalar barada a√Ωdyp ber.
        H√§zir aja√Ωyp mazmun d√∂ret!
        """

        return ulgam_tab≈üyrygy

    async def mazmun_d√∂ret(self):
        """Emeli a≈à bilen doly √∂zbolu≈üly mazmun d√∂retmek"""
        try:
            # Dinamiki tab≈üyryk d√∂ret
            tab≈üyryk = self.dinamiki_tab≈üyryk_d√∂ret()

            # Mazmun d√∂ret
            jogap = self.model.generate_content(tab≈üyryk)
            mazmun = jogap.text.strip()

            # Hashtag'lary akylly go≈ü
            hashtag_lar = self.akylly_hashtag_d√∂ret(mazmun)

            # So≈àky mazmun
            ahyrky_mazmun = f"{mazmun}\n\n{hashtag_lar}"

            return ahyrky_mazmun

        except Exception as e:
            logger.error(f"Mazmun d√∂retmekde √Ωal≈ày≈ülyk: {e}")
            # √Ñti√Ωa√ßlyk - has akylly
            return self.√§ti√Ωa√ßlyk_mazmun_al()

    def akylly_hashtag_d√∂ret(self, mazmun):
        """Mazmuna g√∂r√§ akylly hashtag d√∂retmek"""
        hashtag_lar = ["#ProgrammaYazmak", "#Kod", "#√ñwrenmek"]

        # Mazmuny≈à i√ßinde ge√ß√Ω√§n tehnologi√Ωalara g√∂r√§ hashtag go≈ü
        tehno_a√ßar_s√∂zler = {
            "python": "#Python", "javascript": "#JavaScript", "react": "#React",
            "html": "#HTML", "css": "#CSS", "git": "#Git",
            "api": "#API", "database": "#MaglumatBazasy", "mysql": "#MySQL",
            "mobil": "#MobilApp", "web": "#WebDev", "frontend": "#Frontend",
            "backend": "#Backend", "debugging": "#Debugging", "test": "#Testing"
        }

        mazmun_ki√ßi = mazmun.lower()
        for a√ßar_s√∂z, hashtag in tehno_a√ßar_s√∂zler.items():
            if a√ßar_s√∂z in mazmun_ki√ßi and hashtag not in hashtag_lar:
                hashtag_lar.append(hashtag)
                if len(hashtag_lar) >= 5:  # I≈à k√∂p 5 hashtag
                    break

        # Wagta esaslanan hashtag
        g√ºn√º≈à_wagty = self.g√ºn√º≈à_wagty()
        wagt_hashtag_lary = {
            "ertir": "#IrdenkiStart",
            "g√ºnorta": "#ObetkiWork",
            "ikindi": "#IkindiTime",
            "ag≈üam": "#Ag≈üamkyIdea"
        }

        if g√ºn√º≈à_wagty in wagt_hashtag_lary:
            hashtag_lar.append(wagt_hashtag_lary[g√ºn√º≈à_wagty])

        return " ".join(hashtag_lar)

    def √§ti√Ωa√ßlyk_mazmun_al(self):
        """√ùal≈ày≈ülyk √Ωagda√Ωynda ulanylajak akylly √§ti√Ωa√ßlyk"""
        h√§zirki_wagt = datetime.now(self.wagt_zolagy)

        √§ti√Ωa√ßlyk_habarlar = [
            f"üí° ≈ûu g√ºnler {h√§zirki_wagt.strftime('%d %B')} senesinde programmirlemekde n√§me √∂wrendi≈à?\n\nHer g√ºn ki√ßi √§dim ‚Äî uly √ºst√ºnlikleri≈à a√ßary! Kod √Ωazmagyn i≈à owadan taraplary, hemi≈üe t√§ze zatlar √∂wrenmekdir üöÄ",

            f"ü§î H√§zir ha√Ωsy tehnologi√Ωa bilen i≈üle√Ω√§rsi≈à?\n\nMen ≈üu g√ºnler kod g√∂zden ge√ßir√Ω√§n wagtym ≈üe√Ωle pikir etdim: I≈à gowy kod di≈àe i≈üle√Ω√§n kod d√§l, be√Ωlekileri≈à hem a≈àsat d√º≈ü√ºnip bil√Ω√§n kody! üìù",

            f"‚ö° ≈ûu wagt {h√§zirki_wagt.strftime('%H:%M')} ‚Äî g√ºn√º≈à kod √Ωazmagyna g√º√Ωj√º≈à n√§hili?\n\nK√§te i≈à gowy √ß√∂zg√ºtler komp√Ωuteri √Ωapany≈àdan so≈à akly≈àa gel√Ω√§r. Kelle bula≈üyk bolsa, gysga gezelen√ß jadyly bolup biler! üö∂‚Äç‚ôÇÔ∏è"
        ]

        hashtag_lar = "#ProgrammaYazmak #Kod #H√∂weslendiri≈ü #√ñwrenmek"

        howpsuz_esas = random.choice(√§ti√Ωa√ßlyk_habarlar).replace("*", "").replace("_", "").replace("[", "").replace("]", "")

        return f"{howpsuz_esas}\n\n{hashtag_lar}"

    async def kanala_habar_iber(self, habar):
        """Kanala habar ibermek"""
        try:
            await self.bot.send_message(
                chat_id=self.kanal_id,
                text=habar,
                parse_mode='Markdown'
            )
            logger.info("Habar √ºst√ºnlikli iberildi!")
            return True
        except TelegramError as e:
            logger.error(f"Telegram √Ωal≈ày≈ülygy: {e}")
            return False
        except Exception as e:
            logger.error(f"Habar ibermekde √Ωal≈ày≈ülyk: {e}")
            return False

    async def me√Ωille≈üdirilen_mazmun_iber(self):
        """Me√Ωille≈üdirilen mazmun ibermek"""
        logger.info("Akylly mazmun d√∂redil√Ω√§r...")

        h√§zirki_wagt = datetime.now(self.wagt_zolagy)
        g√ºn√º≈à_wagty = self.g√ºn√º≈à_wagty()

        # Wagta esaslanan ba≈ülyk emojileri
        wagt_emojileri = {
            "ertir": "üåÖ",
            "g√ºnorta": "‚òÄÔ∏è",
            "ikindi": "üå§Ô∏è",
            "ag≈üam": "üåô"
        }

        # Mazmun d√∂ret
        mazmun = await self.mazmun_d√∂ret()

        # Wagt maglumatyny go≈ü
        wagt_str = h√§zirki_wagt.strftime("%H:%M")
        emoji = wagt_emojileri.get(g√ºn√º≈à_wagty, "üíª")

        # So≈àky habar
        ahyrky_habar = f"{emoji} {mazmun}"

        √ºst√ºnlik = await self.kanala_habar_iber(ahyrky_habar)
        if √ºst√ºnlik:
            logger.info(f"Akylly mazmun iberildi! [{wagt_str}]")
        else:
            logger.error("Habar iberilip bilmedi!")

    async def synag_habary(self):
        """Synag habary"""
        print("ü§ñ Synag √º√ßin t√∂t√§nle√Ωin mazmun d√∂redil√Ω√§r...")

        t√∂t√§nle√Ωin_mazmun = await self.mazmun_d√∂ret()

        synag_mazmun = f"""üß™ **SYNAG HABARY** - Bot I≈üle√Ω√§r! üéâ

{t√∂t√§nle√Ωin_mazmun}

---
üìÖ **G√ºndelik Programma:**
‚Ä¢ 09:00 - Irdenki maslahat
‚Ä¢ 12:00 - G√ºnortanlyk mazmun
‚Ä¢ 16:00 - Ikindi pa√Ωla≈üymy
‚Ä¢ 21:00 - Ag≈üam jemi

#SynagBot #ProgrammaBot #Kod"""

        √ºst√ºnlik = await self.kanala_habar_iber(synag_mazmun)
        if √ºst√ºnlik:
            print("‚úÖ Synag habary √ºst√ºnlikli iberildi!")
        else:
            print("‚ùå Synag habary iberilip bilmedi!")

    def habarlary_me√Ωille≈üdir(self):
        """Habar me√Ωille≈üdirmek"""
        # T√ºrkmenistan wagty bilen me√Ωille≈üdirmek
        schedule.every().day.at("09:00").do(lambda: asyncio.create_task(self.me√Ωille≈üdirilen_mazmun_iber()))
        schedule.every().day.at("12:00").do(lambda: asyncio.create_task(self.me√Ωille≈üdirilen_mazmun_iber()))
        schedule.every().day.at("16:00").do(lambda: asyncio.create_task(self.me√Ωille≈üdirilen_mazmun_iber()))
        schedule.every().day.at("21:00").do(lambda: asyncio.create_task(self.me√Ωille≈üdirilen_mazmun_iber()))

        logger.info("Habar wagtlary d√ºz√ºldi!")
        logger.info("Sagatlar: 09:00, 12:00, 16:00, 21:00 (T√ºrkmenistan)")

    async def me√Ωille≈üdiriji_i≈ület(self):
        """Me√Ωille≈üdiriji a√Ωlawy"""
        while self.i≈üle√Ω√§r:
            schedule.run_pending()
            await asyncio.sleep(60)  # Her minut barla

    def flask_programmany_i≈ület(self):
        """Flask programmasyny i≈ület"""
        app.run(host='0.0.0.0', port=self.port, debug=False)

    async def i≈ület(self):
        """Bot i≈ületmek - Railway √º√ßin optimizasi√Ωa edildi"""
        print("ü§ñ Programmirlemek Boty ba≈üla√Ωar...")

        # Ilkinji synag habary
        await self.synag_habary()

        # Me√Ωille≈üdirmeleri d√ºz
        self.habarlary_me√Ωille≈üdir()

        print("‚è∞ Bot me√Ωille≈üdirilen habarlar √º√ßin gara≈ü√Ωar...")
        print("üìç Sagatlar: 09:00, 12:00, 16:00, 21:00 (T√ºrkmenistan)")
        print(f"üåê Flask serweri port {self.port}'da i≈üle√Ω√§r")

        # Flask'y a√Ωry thread'de i≈ület
        flask_thread = threading.Thread(target=self.flask_programmany_i≈ület, daemon=True)
        flask_thread.start()

        # Me√Ωille≈üdirijini i≈ület
        await self.me√Ωille≈üdiriji_i≈ület()

    def dur(self):
        """Bot'y dur"""
        self.i≈üle√Ω√§r = False
        logger.info("Bot durdurylylyar...")

# Signal handler - Railway √º√ßin
def signal_i≈üle√Ωjisi(signum, frame):
    logger.info(f"Signal {signum} alyndy, bot durdurylylyar...")
    bot_mysaly.dur()
    sys.exit(0)

# El bilen synag funksi√Ωalary
async def h√§zir_synag_iber():
    """Derrew synag habary iber"""
    bot = ProgrammaBot()
    await bot.synag_habary()

async def t√∂t√§nle√Ωin_mazmun_iber():
    """Di≈àe t√∂t√§nle√Ωin mazmun iber"""
    bot = ProgrammaBot()
    await bot.me√Ωille≈üdirilen_mazmun_iber()

async def √∂z√º≈à_habary_iber(habar):
    """√ñzel habar iber"""
    bot = ProgrammaBot()
    await bot.kanala_habar_iber(habar)

# Global bot mysaly
bot_mysaly = None

if __name__ == "__main__":
    try:
        bot_mysaly = ProgrammaBot()

        # Signal handlers (Railway √º√ßin)
        signal.signal(signal.SIGTERM, signal_i≈üle√Ωjisi)
        signal.signal(signal.SIGINT, signal_i≈üle√Ωjisi)

        # Bu√Ωruk setiri argumentleri
        import sys
        if len(sys.argv) > 1:
            if sys.argv[1] == "synag":
                # Synag habary iber
                asyncio.run(h√§zir_synag_iber())
            elif sys.argv[1] == "t√∂t√§nle√Ωin":
                # Di≈àe t√∂t√§nle√Ωin mazmun iber
                asyncio.run(t√∂t√§nle√Ωin_mazmun_iber())
            elif sys.argv[1] == "habar" and len(sys.argv) > 2:
                # √ñzel habar iber
                √∂z√º≈à_habary = " ".join(sys.argv[2:])
                asyncio.run(√∂z√º≈à_habary_iber(√∂z√º≈à_habary))
            else:
                print("Ulany≈ü:")
                print("python bot.py              - Adaty i≈ületmek")
                print("python bot.py synag        - Synag habary iber")
                print("python bot.py t√∂t√§nle√Ωin   - T√∂t√§nle√Ωin mazmun iber")
                print("python bot.py habar 'Habar mazmuny' - √ñzel habar iber")
        else:
            # Adaty i≈ületmek (Railway √º√ßin)
            asyncio.run(bot_mysaly.i≈ület())

    except KeyboardInterrupt:
        print("\nüõë Bot durdy!")
    except Exception as e:
        logger.error(f"Umumy √Ωal≈ày≈ülyk: {e}")
        print(f"‚ùå √ùal≈ày≈ülyk: {e}")
